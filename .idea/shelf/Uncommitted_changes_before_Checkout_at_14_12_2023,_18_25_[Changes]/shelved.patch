Index: src/main/java/com/example/ice/BattleSim.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.ice;\n\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Random;\nimport java.util.concurrent.atomic.AtomicBoolean;\n\nimport javafx.event.ActionEvent;\nimport javafx.application.Platform;\nimport javafx.fxml.FXML;\nimport javafx.fxml.FXMLLoader;\nimport javafx.scene.Parent;\nimport javafx.scene.Scene;\nimport javafx.scene.control.Alert;\nimport javafx.stage.Stage;\n\npublic class BattleSim {\n    private User currentPlayer;\n    private User enemyPlayer;\n    private User player;\n    private User NPC;\n    private final Random random = new Random();\n    private Datamon enemyDatamon;\n    private Datamon playerDatamon;\n\n    public void setup(User player, User NPC) {\n        this.player = player;\n        this.NPC = NPC;\n\n        currentPlayer = player;\n        enemyPlayer = NPC;\n\n        enemyDatamon = enemyPlayer.getDatamons().get(0);\n        playerDatamon = currentPlayer.getDatamons().get(0);\n\n}\n\n\n\n    // Checks if Datamon is dead.\n    private void checkIfDead() {\n        if (enemyDatamon.getHP() <= 0) {\n            enemyPlayer.removeDatamon(enemyDatamon);\n            if (!enemyPlayer.getDatamons().isEmpty() ) {\n                enemyDatamon = enemyPlayer.getDatamons().get(0);\n            }\n\n        }else if(playerDatamon.getHP() <= 0){\n            currentPlayer.removeDatamon(playerDatamon);\n            if(!currentPlayer.getDatamons().isEmpty()){\n                playerDatamon = currentPlayer.getDatamons().get(0);\n            }\n        }\n    }\n\n    // Checks winner by parsing NPC and Player Datamon ArrayLists.\n    private Boolean checkIfWin() {\n        if (player.getDatamons().isEmpty()) {\n            showErrorDialog(\"Winner found \", NPC.getUsername() + \" won!\");\n            return true;\n\n        } else if (NPC.getDatamons().isEmpty()) {\n            showErrorDialog(\"Winner found \", player.getUsername() + \" won!\");\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n\n\n    // Method is called on buttons. Fight() checks winner and prompts if winner is found, checks dead datamon\n    // Prompting if winner is found through method calls.\n    // Finally calls Moves from button if player turn or from random number on AI turn.\n    public void Fight(int pick) {\n        if (enemyPlayer != null && currentPlayer != null) {\n\n            // Used for debugging player objects and datamon arraylists.\n            System.out.println(\"Player datamons\" + player.getDatamons().toString() );\n            System.out.println(\"NPC datamons\" + NPC.getDatamons());\n            System.out.println(\"CurrentPlayer is: \" + currentPlayer.getUsername());\n            System.out.println(\"CurrentPlayer is: \" + enemyPlayer.getUsername());\n\n\n            if (!checkIfWin()) {\n                checkIfDead();\n\n                // Execute player move\n                if (currentPlayer.equals(player)) {\n                    executeMove(pick, playerDatamon, enemyDatamon);\n                    checkIfDead();\n                    if (checkIfWin()) return;\n\n                    switchUser(); // Switch to NPC after player move\n\n                    // Execute NPC move\n                    int npcMove = random.nextInt(1, 5); // Assuming 4 moves, inclusive\n                    executeMove(npcMove, enemyDatamon, playerDatamon);\n                    checkIfDead();\n                    checkIfWin();\n\n                    switchUser(); // Switch back to player\n                }\n            }\n        }\n    }\n\n    public Datamon getPlayerDatamon(){\n        return playerDatamon;\n    }\n\n\n\n\n\n\n\n    // Method is called on buttons. Fight() checks winner and prompts if winner is found, checks dead datamon\n    // Prompting if winner is found through method calls.\n    // Finally calls Moves from button if player turn or from random number on AI turn.\n\n        /*\n    // Picks datamon from list.\n    private void chooseMon(int x) {\n        int pick;\n\n        if (player Mon = dead){\n            for (int i = 0 : i <= player.getDatamons().size(): i++) {\n                System.out.println(\"Option \" + player.getDatamons().get(i));\n            }\n\n            switch (x) {\n                case 1:\n                    enemyDatamon = currentPlayer.setCurrentDatamon(x)\n                    break;\n\n                case 2:\n                    enemyDatamon = currentPlayer.setCurrentDatamon(x)\n                    break;\n\n                case 3:\n                    enemyDatamon = currentPlayer.setCurrentDatamon(x)\n                    break;\n            }\n            //TODO: Add måde at vælge på.\n            //Generer buttons ud fra list.size() med navne på objekter.\n        }\n    }\n\n         */\n\n\n\n\n    // Swaps user on round end.\n    private void switchUser() {\n        if (currentPlayer.equals(player)) {\n            currentPlayer = enemyPlayer;\n            enemyPlayer = player;\n        } else {\n            currentPlayer = player;\n            enemyPlayer = NPC;\n        }\n    }\n\n    private void showErrorDialog(String title, String content) {\n        Alert alert = new Alert(Alert.AlertType.ERROR);\n        alert.setTitle(title);\n        alert.setHeaderText(null);\n        alert.setContentText(content);\n        alert.showAndWait();\n    }\n\n\n\n    private void executeMove(int moveNumber, Datamon attacker, Datamon defender) {\n        switch (moveNumber) {\n            case 1:\n                move1(attacker, defender);\n                break;\n            case 2:\n                move2(attacker, defender);\n                break;\n            case 3:\n                move3(attacker, defender);\n                break;\n            case 4:\n                move4(attacker, defender);\n                break;\n            default:\n                System.out.println(\"Invalid move.\");\n        }\n    }\n\n\n    // Current datamon's move 1 to 4.\n    public void move1(Datamon attacker, Datamon defender) {\n        defender.setHP(defender.getHP() - attacker.move1(defender));\n\n    }\n    public void move2(Datamon attacker, Datamon defender) {\n        defender.setHP(defender.getHP() - attacker.move2(defender));\n\n    }\n\n    public void move3(Datamon attacker, Datamon defender) {\n        defender.setHP(defender.getHP() - attacker.move3(defender));\n    }\n    public void move4(Datamon attacker, Datamon defender) {\n        defender.setHP(defender.getHP() - attacker.move4(defender));\n    }\n\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/ice/BattleSim.java b/src/main/java/com/example/ice/BattleSim.java
--- a/src/main/java/com/example/ice/BattleSim.java	
+++ b/src/main/java/com/example/ice/BattleSim.java	
@@ -1,19 +1,7 @@
 package com.example.ice;
 
-import java.io.IOException;
-import java.util.ArrayList;
-import java.util.List;
 import java.util.Random;
-import java.util.concurrent.atomic.AtomicBoolean;
-
-import javafx.event.ActionEvent;
-import javafx.application.Platform;
-import javafx.fxml.FXML;
-import javafx.fxml.FXMLLoader;
-import javafx.scene.Parent;
-import javafx.scene.Scene;
 import javafx.scene.control.Alert;
-import javafx.stage.Stage;
 
 public class BattleSim {
     private User currentPlayer;
@@ -31,28 +19,30 @@
         currentPlayer = player;
         enemyPlayer = NPC;
 
-        enemyDatamon = enemyPlayer.getDatamons().get(0);
-        playerDatamon = currentPlayer.getDatamons().get(0);
+        enemyDatamon = enemyPlayer.getDatamons().getFirst();
+        playerDatamon = currentPlayer.getDatamons().getFirst();
 
 }
 
 
 
-    // Checks if Datamon is dead.
     private void checkIfDead() {
-        if (enemyDatamon.getHP() <= 0) {
-            enemyPlayer.removeDatamon(enemyDatamon);
-            if (!enemyPlayer.getDatamons().isEmpty() ) {
-                enemyDatamon = enemyPlayer.getDatamons().get(0);
-            }
-
-        }else if(playerDatamon.getHP() <= 0){
+        if (playerDatamon != null && playerDatamon.getHP() <= 0) {
+            System.out.println("Player's Datamon defeated: " + playerDatamon.getName());
             currentPlayer.removeDatamon(playerDatamon);
-            if(!currentPlayer.getDatamons().isEmpty()){
-                playerDatamon = currentPlayer.getDatamons().get(0);
-            }
+            playerDatamon = getNextDatamon(currentPlayer);
+        }
+
+        if (enemyDatamon != null && enemyDatamon.getHP() <= 0) {
+            System.out.println("Enemy's Datamon defeated: " + enemyDatamon.getName());
+            enemyPlayer.removeDatamon(enemyDatamon);
+            enemyDatamon = getNextDatamon(enemyPlayer);
         }
     }
+
+    private Datamon getNextDatamon(User player) {
+        return player.getDatamons().isEmpty() ? null : player.getDatamons().get(0);
+    }
 
     // Checks winner by parsing NPC and Player Datamon ArrayLists.
     private Boolean checkIfWin() {
@@ -74,37 +64,40 @@
     // Prompting if winner is found through method calls.
     // Finally calls Moves from button if player turn or from random number on AI turn.
     public void Fight(int pick) {
-        if (enemyPlayer != null && currentPlayer != null) {
-
-            // Used for debugging player objects and datamon arraylists.
-            System.out.println("Player datamons" + player.getDatamons().toString() );
-            System.out.println("NPC datamons" + NPC.getDatamons());
-            System.out.println("CurrentPlayer is: " + currentPlayer.getUsername());
-            System.out.println("CurrentPlayer is: " + enemyPlayer.getUsername());
-
-
-            if (!checkIfWin()) {
-                checkIfDead();
-
-                // Execute player move
-                if (currentPlayer.equals(player)) {
-                    executeMove(pick, playerDatamon, enemyDatamon);
-                    checkIfDead();
-                    if (checkIfWin()) return;
+        if (enemyPlayer != null && currentPlayer != null && !checkIfWin()) {
+            // Player's turn
+            if (currentPlayer.equals(player)) {
+                executeMove(pick, playerDatamon, enemyDatamon);
+                checkIfDead();
+                if (checkIfWin()) return;
+            }
 
-                    switchUser(); // Switch to NPC after player move
+            switchUser(); // Switch to NPC
 
-                    // Execute NPC move
-                    int npcMove = random.nextInt(1, 5); // Assuming 4 moves, inclusive
-                    executeMove(npcMove, enemyDatamon, playerDatamon);
-                    checkIfDead();
-                    checkIfWin();
+            // NPC's turn
+            if (currentPlayer.equals(NPC)) {
+                int npcMove = random.nextInt(1, 5); // Assuming 4 moves, inclusive
+                executeMove(npcMove, enemyDatamon, playerDatamon);
+                checkIfDead();
+                if (checkIfWin()) return;
+            }
 
-                    switchUser(); // Switch back to player
-                }
-            }
-        }
+            switchUser(); // Switch back to player
+        }
+    }
+
+    private void switchUser() {
+        User temp = currentPlayer;
+        currentPlayer = enemyPlayer;
+        enemyPlayer = temp;
+
+        // Update Datamons for the new current player
+        playerDatamon = currentPlayer.getDatamons().isEmpty() ? null : currentPlayer.getDatamons().getFirst();
+        enemyDatamon = enemyPlayer.getDatamons().isEmpty() ? null : enemyPlayer.getDatamons().getFirst();
+
+        System.out.println("Turn switched. CurrentPlayer: " + currentPlayer.getUsername());
     }
+
 
     public Datamon getPlayerDatamon(){
         return playerDatamon;
@@ -151,18 +144,33 @@
          */
 
 
-
+/*
 
     // Swaps user on round end.
     private void switchUser() {
-        if (currentPlayer.equals(player)) {
+        if (currentPlayer.getDatamons().isEmpty()) {
+            // currentPlayer has no more Datamons
+            // Declare enemyPlayer as the winner
+            showErrorDialog("Game Over", enemyPlayer.getUsername() + " wins!");
+            // Handle end of game logic here (e.g., navigate to a different screen or exit)
+        } else if (enemyPlayer.getDatamons().isEmpty()) {
+            // enemyPlayer has no more Datamons
+            // Declare currentPlayer as the winner
+            showErrorDialog("Game Over", currentPlayer.getUsername() + " wins!");
+            // Handle end of game logic here
+        } else {
+            // Normal switch of turns
+            User temp = currentPlayer;
             currentPlayer = enemyPlayer;
-            enemyPlayer = player;
-        } else {
-            currentPlayer = player;
-            enemyPlayer = NPC;
+            enemyPlayer = temp;
+
+            // Update Datamons for the new current player
+            playerDatamon = currentPlayer.getDatamons().isEmpty() ? null : currentPlayer.getDatamons().getFirst();
+            enemyDatamon = enemyPlayer.getDatamons().isEmpty() ? null : enemyPlayer.getDatamons().getFirst();
         }
     }
+
+ */
 
     private void showErrorDialog(String title, String content) {
         Alert alert = new Alert(Alert.AlertType.ERROR);
Index: src/main/java/com/example/ice/Datamons/Bobby.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.ice.Datamons;\n\nimport com.example.ice.Datamon;\n\npublic class Bobby implements Datamon {\n    private String name;\n    private int hp;\n    private String CreatureType;\n    private String move1Name = \"Jeg kommer i morgen gutter\";\n    private String move2Name = \"Ej jeg kommer på torsdag gutter\";\n    private String move3Name = \"Bogstaveligt talt bare dyresex lmao\";\n    private String move4Name = \"Drop ud\";\n\n\n\n    public Bobby() {\n        this.name = \"Bobby\";\n        this.hp = 310;\n        this.CreatureType = \"Ghost\";\n    }\n\n    @Override\n    public String getName() {\n        return name;\n    }\n\n    @Override\n    public int getHP() {\n        return hp;\n    }\n\n    @Override\n    public void setHP(int hp) {\n        this.hp = hp;\n    }\n\n    @Override\n    public String getCreatureType() {\n        return CreatureType;\n    }\n\n    @Override\n    public int move1(Datamon target){\n        int damage = 2;\n        System.out.println(\"Angreb: \" + name + \" Dealt : \" + damage + \" To \" + target.getName());\n        System.out.println(target.getName() + \" hp is now: \" + (target.getHP()-damage));\n        return damage;\n    }\n\n    @Override\n    public int move2(Datamon target){\n        int damage = 4;\n        System.out.println(\"Angreb: \" + name + \" Dealt : \" + damage + \" To \" + target.getName());\n        System.out.println(target.getName() + \" hp is now: \" + (target.getHP()-damage));\n        return damage;\n    }\n\n    @Override\n    public int move3(Datamon target){\n        int damage = 10;\n        System.out.println(\"Angreb: \" + name + \" Dealt : \" + damage + \" To \" + target.getName());\n        System.out.println(target.getName() + \" hp is now: \" + (target.getHP()-damage));\n        return damage;\n    }\n\n    @Override\n    public int move4(Datamon target){\n        setHP(0);\n        int damage = 0;\n        System.out.println(\"Angreb: \" + name + \" Dealt : \" + damage + \" To \" + target.getName());\n        System.out.println(target.getName() + \" hp is now: \" + (target.getHP()-damage));\n        return damage;\n    }\n\n    @Override\n    public String getMove1Name() {\n        return move1Name;\n    }\n\n    @Override\n    public String getMove2Name() {\n        return move2Name;\n    }\n\n    @Override\n    public String getMove3Name() {\n        return move3Name;\n    }\n\n    @Override\n    public String getMove4Name() {\n        return move4Name;\n    }\n\n    @Override\n    public String introduction() {\n        return \"A giant monster apears from the dista..... oh wait its just tiny jonas\";\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/ice/Datamons/Bobby.java b/src/main/java/com/example/ice/Datamons/Bobby.java
--- a/src/main/java/com/example/ice/Datamons/Bobby.java	
+++ b/src/main/java/com/example/ice/Datamons/Bobby.java	
@@ -2,6 +2,8 @@
 
 import com.example.ice.Datamon;
 
+import java.util.Objects;
+
 public class Bobby implements Datamon {
     private String name;
     private int hp;
@@ -92,6 +94,17 @@
         return move4Name;
     }
 
+    @Override
+    public boolean equals(Object o) {
+        return this == o;
+    }
+
+    @Override
+    public int hashCode() {
+        return System.identityHashCode(this);
+    }
+
+
     @Override
     public String introduction() {
         return "A giant monster apears from the dista..... oh wait its just tiny jonas";
Index: src/main/java/com/example/ice/Datamons/Fred1.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.ice.Datamons;\n\nimport com.example.ice.Datamon;\n\npublic class Fred1 implements Datamon{\n    private String name;\n    private int hp;\n    private String CreatureType;\n    private String move1Name = \"Forvir med kompleks matematik\";\n    private String move2Name = \"Spil Gwen\";\n    private String move3Name = \"Spil literally alt andet end Gwen\";\n    private String move4Name = \"Jeg gider ikke være Tauren!\";\n\n    public Fred1() {\n        this.name = \"Fred1\";\n        this.hp= 200;\n        this.CreatureType = \"Ghost\";\n    }\n\n    @Override\n    public String getName() {\n        return name;\n    }\n\n    @Override\n    public int getHP() {\n        return hp;\n    }\n\n    @Override\n    public void setHP(int hp) {\n        this.hp = hp;\n    }\n\n    @Override\n    public String getCreatureType() {\n        return CreatureType;\n    }\n\n    @Override\n    public int move1(Datamon target) {\n        int damage = 30;\n        System.out.println(\"Angreb: \" + name + \" Dealt : \" + damage + \" To \" + target.getName());\n        System.out.println(target.getName() + \" hp is now: \" + (target.getHP()-damage));\n        return damage;\n    }\n\n    @Override\n    public int move2(Datamon target) {\n        int damage = 5;\n        System.out.println(\"Angreb: \" + name + \" Dealt : \" + damage + \" To \" + target.getName());\n        System.out.println(target.getName() + \" hp is now: \" + (target.getHP()-damage));\n        return damage;\n    }\n\n    @Override\n    public int move3(Datamon target) {\n        int damage = -20;\n        System.out.println(\"Angreb: \" + name + \" Dealt : \" + damage + \" To \" + target.getName());\n        System.out.println(target.getName() + \" hp is now: \" + (target.getHP()-damage));\n        return damage;\n    }\n\n    @Override\n    public int move4(Datamon target) {\n        int damage = 0;\n        System.out.println(\"Angreb: \" + name + \" Dealt : \" + damage + \" To \" + target.getName());\n        System.out.println(target.getName() + \" hp is now: \" + (target.getHP()-damage));\n        return damage;\n    }\n\n    @Override\n    public String getMove1Name() {\n        return move1Name;\n    }\n\n    @Override\n    public String getMove2Name() {\n        return move2Name;\n    }\n\n    @Override\n    public String getMove3Name() {\n        return move3Name;\n    }\n\n    @Override\n    public String getMove4Name() {\n        return move4Name;\n    }\n\n    @Override\n    public String introduction() {\n        return null;\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/ice/Datamons/Fred1.java b/src/main/java/com/example/ice/Datamons/Fred1.java
--- a/src/main/java/com/example/ice/Datamons/Fred1.java	
+++ b/src/main/java/com/example/ice/Datamons/Fred1.java	
@@ -2,6 +2,8 @@
 
 import com.example.ice.Datamon;
 
+import java.util.Objects;
+
 public class Fred1 implements Datamon{
     private String name;
     private int hp;
@@ -89,6 +91,16 @@
         return move4Name;
     }
 
+    @Override
+    public boolean equals(Object o) {
+        return this == o;
+    }
+
+    @Override
+    public int hashCode() {
+        return System.identityHashCode(this);
+    }
+
     @Override
     public String introduction() {
         return null;
